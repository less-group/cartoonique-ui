{% comment %}
  Aurora Theme - Pixar Face Transform Integration
  
  This snippet handles the integration of the Pixar face transformation feature 
  with the Aurora theme's Add to Cart flow.
{% endcomment %}

{% assign product_has_transform = product.template_suffix contains 'with-faceswap' or product.template_suffix contains 'pixar-transform' %}

<div id="pixar-aurora-integration" style="margin: 10px 0;">
  <style>
    /* Ensure component visibility */
    pixar-transform-file-input, 
    face-swap-file-input-wrapper,
    .file-input-wrapper, 
    .file-input-wrapper__popup-open-btn {
      display: block !important;
      visibility: visible !important;
      opacity: 1 !important;
    }
    
    /* Make popup fully visible and properly styled */
    .file-input-wrapper__popup {
      position: fixed !important;
      top: 0 !important;
      left: 0 !important;
      width: 100% !important;
      height: 100% !important;
      background-color: rgba(0, 0, 0, 0.7) !important;
      z-index: 9999 !important;
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
      opacity: 1 !important;
      visibility: visible !important;
    }
    
    /* Style the popup content */
    .file-input-wrapper__popup-content {
      background-color: white !important;
      padding: 20px !important;
      border-radius: 8px !important;
      max-width: 90% !important;
      width: 500px !important;
      max-height: 90% !important;
      overflow-y: auto !important;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2) !important;
    }
    
    /* Hide component area but keep it accessible */
    #pixar-component-area {
      min-height: 50px;
      overflow: visible;
      position: relative;
      opacity: 0.001;
    }
    
    /* Style for the dedicated upload button */
    #pixar-upload-button {
      display: block;
      width: 100%;
      margin-bottom: 15px;
      padding: 15px 25px;
      font-size: 16px;
      font-weight: bold;
      background-color: #4a7dbd;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    
    /* Debug panel styling */
    #pixar-debug-panel {
      display: none;
      margin: 10px 0;
      padding: 10px;
      border: 1px dashed #ccc;
      font-size: 12px;
    }
    
    /* Loading popup styling */
    #pixar-loading-popup {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.7);
      z-index: 10000;
      display: none;
      align-items: center;
      justify-content: center;
    }
    
    .pixar-loading-content {
      background-color: white;
      padding: 30px;
      border-radius: 8px;
      max-width: 90%;
      width: 400px;
      text-align: center;
    }
    
    .pixar-loading-bar {
      width: 100%;
      height: 20px;
      background-color: #f3f3f3;
      border-radius: 10px;
      overflow: hidden;
      margin: 20px 0;
    }
    
    .pixar-loading-bar-progress {
      height: 100%;
      background-color: #4a7dbd;
      width: 0%;
      transition: width 0.3s ease;
    }
  </style>

  <!-- Pixar loading popup -->
  <div id="pixar-loading-popup">
    <div class="pixar-loading-content">
      <h3>Generating Your Cartoonique Image</h3>
      <div class="pixar-loading-bar">
        <div class="pixar-loading-bar-progress" id="pixar-loading-progress"></div>
      </div>
      <p>Please wait while we transform your image. This process can take 1-2 minutes.</p>
    </div>
  </div>

  <!-- Explicitly render component with proper visibility -->
  <div id="pixar-component-area">
    {% render 'pixar-transform-file-input', product: product, section_id: section.id, customer: customer %}
    
    <div id="pixar-debug-panel">
      <h4>Pixar Debug Info</h4>
      <div id="pixar-debug-content"></div>
      <div>
        <p>Template: {{ product.template_suffix }}</p>
        <p>Section ID: {{ section.id }}</p>
      </div>
    </div>
  </div>

  <!-- Dedicated upload button for Aurora theme -->
  <button type="button" id="pixar-upload-button">
    ðŸ“¸ UPLOAD YOUR PHOTO
  </button>

  <script>
    // Aurora theme - Pixar integration script
    document.addEventListener('DOMContentLoaded', function() {
      console.log('Aurora Pixar integration script loaded for template: {{ product.template_suffix }}');
      console.log('Section ID: {{ section.id }}');
      
      // Debug helper
      const debug = {
        enabled: {% if settings.debugMode %}true{% else %}false{% endif %},
        panel: document.getElementById('pixar-debug-panel'),
        content: document.getElementById('pixar-debug-content'),
        
        log: function(message) {
          if (!this.enabled) return;
          console.log('ðŸ”„ AURORA PIXAR:', message);
          
          if (this.content) {
            const item = document.createElement('div');
            item.textContent = message;
            this.content.appendChild(item);
          }
        },
        
        show: function() {
          if (this.panel) this.panel.style.display = 'block';
        }
      };
      
      // Show debug panel during development
      if (debug.enabled) {
        debug.show();
      }
      
      // State tracking
      window.pixarTransformComplete = false;
      window.auroraImageProcessed = false;
      
      // Loading popup elements
      const loadingPopup = document.getElementById('pixar-loading-popup');
      const loadingProgress = document.getElementById('pixar-loading-progress');
      
      // Find components and form
      const productForm = document.querySelector('form[action="/cart/add"]');
      const addToCartButton = productForm ? productForm.querySelector('button[type="submit"]') : null;
      const uploadButton = document.getElementById('pixar-upload-button');
      
      debug.log('Initial setup - Form found: ' + !!productForm + ', Button found: ' + !!addToCartButton);
      
      // Function to find Pixar component
      function findPixarComponent() {
        // First check global reference
        if (window.pixarComponent) {
          debug.log('Found component via global reference');
          return window.pixarComponent;
        }
        
        // Check in DOM
        const pixarComponent = document.querySelector('pixar-transform-file-input');
        if (pixarComponent) {
          debug.log('Found component in DOM: ' + pixarComponent.tagName);
          window.pixarComponent = pixarComponent;
          window.pixarComponentReady = true;
          return pixarComponent;
        }
        
        debug.log('No component found. Adding the component programmatically...');
        
        // If component not found, try to create one directly
        try {
          const componentArea = document.getElementById('pixar-component-area');
          if (componentArea) {
            const newComponent = document.createElement('pixar-transform-file-input');
            newComponent.setAttribute('data-section-id', '{{ section.id }}');
            newComponent.setAttribute('data-product-id', '{{ product.id }}');
            newComponent.setAttribute('data-product-variant-id', '{{ product.selected_or_first_available_variant.id }}');
            newComponent.setAttribute('class', 'file-input-wrapper-{{ section.id }} file-input-wrapper');
            componentArea.appendChild(newComponent);
            debug.log('Created new component programmatically');
            window.pixarComponent = newComponent;
            window.pixarComponentReady = true;
            return newComponent;
          }
        } catch (error) {
          debug.log('Error creating component: ' + error.message);
        }
        
        return null;
      }
      
      // Function to show the loading popup
      function showLoadingPopup() {
        debug.log('Showing loading popup');
        if (loadingPopup) {
          loadingPopup.style.display = 'flex';
        }
      }
      
      // Function to hide the loading popup
      function hideLoadingPopup() {
        debug.log('Hiding loading popup');
        if (loadingPopup) {
          loadingPopup.style.display = 'none';
        }
      }
      
      // Function to update loading progress
      function updateLoadingProgress(progress) {
        if (loadingProgress) {
          loadingProgress.style.width = progress + '%';
        }
      }
      
      // Function to trigger file selection
      function triggerImageUpload() {
        debug.log('Triggering image upload');
        
        // Find component
        const component = findPixarComponent();
        if (!component) {
          debug.log('ERROR: Could not find Pixar component');
          return;
        }
        
        // Check if component has native popup method and use it
        if (typeof component.openPopup === 'function') {
          debug.log('Using component\'s native openPopup method');
          component.openPopup();
          return;
        }
        
        // If no openPopup method, try to find popup element and show it
        const popup = document.querySelector('.file-input-wrapper__popup');
        if (popup) {
          debug.log('Found popup element, showing it');
          popup.style.display = 'flex';
          popup.style.visibility = 'visible';
          popup.style.opacity = '1';
          return;
        }
        
        // Try to find file input
        const fileInput = component.querySelector('input[type="file"]');
        if (fileInput) {
          debug.log('No popup method found, clicking file input directly');
          fileInput.click();
        } else {
          debug.log('ERROR: Could not find file input in component');
        }
      }
      
      // Function to update add to cart button state
      function updateButtonState() {
        if (!addToCartButton) return;
        
        if (window.pixarTransformComplete || window.auroraImageProcessed) {
          debug.log('Enabling Add to Cart button');
          addToCartButton.disabled = false;
          addToCartButton.classList.remove('disabled');
          // Change button text to show enabled state
          addToCartButton.innerHTML = addToCartButton.innerHTML.replace('Upload Your Photo First', 'Add to Cart');
        } else {
          debug.log('Disabling Add to Cart button');
          addToCartButton.disabled = true;
          addToCartButton.classList.add('disabled');
          // Change button text to guide the user
          if (!addToCartButton.innerHTML.includes('Upload Your Photo First')) {
            addToCartButton.innerHTML = addToCartButton.innerHTML.replace('Add to Cart', 'Upload Your Photo First');
          }
        }
      }
      
      // Add event listeners for pixar transformation events
      document.addEventListener('pixar-transform-progress', function(event) {
        debug.log('Progress event received: ' + JSON.stringify(event.detail));
        // Show loading popup and update progress
        showLoadingPopup();
        if (event.detail && typeof event.detail.progress === 'number') {
          updateLoadingProgress(event.detail.progress);
        }
      });
      
      document.addEventListener('pixar-transform-complete', function(event) {
        debug.log('Complete event received: ' + JSON.stringify(event.detail));
        // Hide loading popup
        hideLoadingPopup();
        // Update state
        window.pixarTransformComplete = true;
        window.auroraImageProcessed = true;
        updateButtonState();
      });
      
      document.addEventListener('pixar-transform-error', function(event) {
        debug.log('Error event received: ' + JSON.stringify(event.detail));
        // Hide loading popup
        hideLoadingPopup();
        alert('An error occurred while processing your image. Please try again.');
      });
      
      // Setup upload button click handler
      if (uploadButton) {
        uploadButton.addEventListener('click', function() {
          triggerImageUpload();
        });
      }
      
      // Intercept form submission if transformation is not complete
      if (productForm) {
        const originalSubmit = productForm.onsubmit;
        
        productForm.onsubmit = function(event) {
          if (!window.pixarTransformComplete && !window.auroraImageProcessed) {
            debug.log('Preventing form submission - transformation not complete');
            event.preventDefault();
            event.stopPropagation();
            
            // Show a message to the user
            alert('Please upload your photo and complete the transformation before adding to cart.');
            
            // Trigger the upload flow
            triggerImageUpload();
            return false;
          }
          
          debug.log('Allowing form submission - transformation complete');
          
          // Call original submit handler if it exists
          if (typeof originalSubmit === 'function') {
            return originalSubmit.call(this, event);
          }
          
          return true;
        };
      }
      
      // Initialize
      // Disable the Add to Cart button initially
      updateButtonState();
      
      // Ensure the image processing manager is properly initialized
      if (window.imageProcessingManager) {
        debug.log('ImageProcessingManager already initialized');
      } else {
        debug.log('Initializing ImageProcessingManager');
        window.imageProcessingManager = new ImageProcessingManager();
      }
      
      // Setup text overlay integration
      if (typeof setupPixarTextOverlay === 'function') {
        debug.log('Setting up text overlay integration');
        setupPixarTextOverlay({
          debug: debug.enabled,
          sectionId: '{{ section.id }}'
        });
      } else {
        debug.log('Text overlay setup function not found. Will load it dynamically.');
        // Load pixar-integration.js if not already loaded
        const integrationScript = document.createElement('script');
        integrationScript.src = '{{ "pixar-integration.js" | asset_url }}';
        integrationScript.onload = function() {
          debug.log('Loaded pixar-integration.js, setting up text overlay');
          if (typeof setupPixarTextOverlay === 'function') {
            setupPixarTextOverlay({
              debug: debug.enabled,
              sectionId: '{{ section.id }}'
            });
          }
        };
        document.head.appendChild(integrationScript);
      }
      
      debug.log('Integration setup complete');
    });
  </script>
</div>

<!-- Include required scripts -->
<script src="{{ 'unified-api-client.js' | asset_url }}" defer></script>
<script src="{{ 'image-processing-manager.js' | asset_url }}" defer></script>
<script src="{{ 'pixar-transform-file-input.js' | asset_url }}" defer></script>
<script src="{{ 'pixar-text-manager.js' | asset_url }}" defer></script>
<script src="{{ 'pixar-text-overlay.js' | asset_url }}" defer></script>
<script src="{{ 'pixar-integration.js' | asset_url }}" defer></script> 