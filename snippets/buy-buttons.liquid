{%- comment -%}
  ----------------------------------------------------------------------------------------------------------------------
  BUY BUTTONS
  ----------------------------------------------------------------------------------------------------------------------

  This component is used to show the buy buttons

  ********************************************
  Supported variables
  ********************************************

  * product: the product from which to show the buttons
  * show_payment_button: if we show or not the dynamic checkout button
  * show_gift_card_recipient: for gift card products, an optional message/email to be sent to the recipient
  * button_size: the size of the button (default to xl if none is passed)
  * atc_button_background: the background of the ATC button
  * atc_button_text_color: the text color of the ATC button
  * payment_button_background: the custom dynamic checkout button background
  * payment_button_text_color: the custom dynamic checkout button text color
  * form_id: if specified, define the form ID linked to this input
{%- endcomment -%}

{%- assign variant_picker_block = section.blocks | where: 'type', 'variant_picker' | first -%}

{%- assign recipient_feature_active = false -%}

{%- if product.gift_card? and show_gift_card_recipient -%}
  {%- assign recipient_feature_active = true -%}
  {%- assign show_payment_button = false -%}
{%- endif -%}

{%- form 'product', product, is: 'product-form', id: form_id -%}
  <input
    type="hidden"
    {% if variant_picker_block != blank %}
      disabled
    {% endif %}
    name="id"
    value="{{ product.selected_or_first_available_variant.id }}"
  >

  {%- assign button_disabled = false -%}
  {%- assign button_size = button_size | default: 'xl' -%}

  {%- if product.selected_or_first_available_variant == null -%}
    {%- capture button_content -%}{{ 'product.general.unavailable_button' | t }}{%- endcapture -%}
    {%- assign button_disabled = true -%}
  {%- elsif product.selected_or_first_available_variant.available -%}
    {%- if product.template_suffix contains 'pre-order' -%}
      {%- capture button_content -%}{{ 'product.general.pre_order_button' | t }}{%- endcapture -%}
    {%- else -%}
      {%- capture button_content -%}{{ 'product.general.add_to_cart_button' | t }}{%- endcapture -%}
    {%- endif -%}
  {%- else -%}
    {%- capture button_content -%}{{ 'product.general.sold_out_button' | t }}{%- endcapture -%}
    {%- assign button_disabled = true -%}
  {%- endif -%}

  <div class="v-stack gap-4">
    {%- if recipient_feature_active -%}
      <gift-card-recipient class="gift-card-recipient v-stack gap-3">
        {%- assign checkbox_label = 'gift_card.recipient.checkbox' | t -%}
        {%- render 'checkbox', label: checkbox_label, name: 'properties[__shopify_send_gift_card_to_recipient]' -%}

        <div class="gift-card-recipient__fields" hidden>
          <div class="fieldset">
            {%- liquid
              assign recipient_email_label = 'gift_card.recipient.email_label' | t
              render 'input', type: 'email', label: recipient_email_label, name: 'properties[Recipient email]', value: form.email, required: true

              assign recipient_name_label = 'gift_card.recipient.name_label' | t
              render 'input', label: recipient_name_label, name: 'properties[Recipient name]', value: form.name

              assign send_on_label = 'gift_card.recipient.send_on_label' | t
              render 'input', type: 'date', label: send_on_label, name: 'properties[Send on]', value: form.send_on, pattern: '\d{4}-\d{2}-\d{2}'
              render 'input', type: 'hidden', name: 'properties[__shopify_offset]'

              assign message_label = 'gift_card.recipient.message_label' | t
              render 'input', label: message_label, name: 'properties[Message]', value: form.message, multiline: 3, maxlength: 200, show_max_characters_count: true
            -%}
          </div>
        </div>
      </gift-card-recipient>
    {%- endif -%}

    <buy-buttons class="buy-buttons {% if show_payment_button %}buy-buttons--multiple{% endif %}" template="{{ product.template_suffix | escape }}" form="{{ form_id }}">
      {%- render 'button', content: button_content, type: 'submit', size: button_size, disabled: button_disabled, secondary: show_payment_button, subdued: button_disabled, background: atc_button_background, text_color: atc_button_text_color -%}

      {%- if show_payment_button -%}
        {{- form | payment_button -}}

        <style>
          #{{ form_id }} .shopify-payment-button {
            {%- unless product.selected_or_first_available_variant.available -%}
              display: none;
            {%- endunless -%}

            {%- if payment_button_background != blank and payment_button_background != 'rgba(0,0,0,0)' -%}
              --button-background: {{ payment_button_background.rgb }};
            {%- endif -%}

            {%- if payment_button_text_color != blank and payment_button_text_color != 'rgba(0,0,0,0)' -%}
              --button-text-color: {{ payment_button_text_color.rgb }};
            {%- endif -%}
          }
        </style>
      {%- endif -%}
    </buy-buttons>

    <!-- Force display pixar/faceswap components for all products during debug -->
    <div id="pixar-upload-container" style="margin-top: 20px; width: 100%;">
      <!-- Create a direct upload button -->
      <button id="direct-upload-button" 
        style="background-color: #4a7dbd; color: white; border: none; border-radius: 4px; padding: 15px 25px; font-size: 16px; font-weight: bold; width: 100%; cursor: pointer; display: block !important; visibility: visible !important; opacity: 1 !important;">
        UPLOAD YOUR PHOTO
      </button>
      
      <!-- Component debug area -->
      <div id="pixar-component-debug" style="margin-top: 10px; border: 1px dashed #ccc; padding: 10px; font-size: 11px; display: none;">
        <p>Debugging information:</p>
        <div id="debug-info-content"></div>
      </div>
    </div>

    <!-- Explicitly render component with high visibility -->
    <div id="pixar-component-container" style="display: block !important; margin: 20px 0;">
      {% if settings.enable_pixar_transform %}
        {% render 'pixar-transform-file-input', product: product, section_id: section.id, customer: customer %}
      {% else %}
        {% render 'face-swap-file-input', product: product, section_id: section.id, customer: customer %}
      {% endif %}
    </div>

    <script>
      // Force component visibility and setup on DOMContentLoaded
      document.addEventListener('DOMContentLoaded', function() {
        console.log('⭐ Pixar direct initialization script loaded');
        
        // Show debug area during development
        document.getElementById('pixar-component-debug').style.display = 'block';
        var debugInfo = document.getElementById('debug-info-content');
        debugInfo.innerHTML = '<p>Pixar component initialization started...</p>';
        
        // Register direct global handlers to ensure ImageProcessingManager can find our components
        window.pixarComponentReady = false;
        window.pixarComponent = null;
        
        // Set up the direct upload button
        var directButton = document.getElementById('direct-upload-button');
        if (directButton) {
          directButton.addEventListener('click', function() {
            console.log('⭐ Direct upload button clicked');
            uploadPhoto();
          });
        }
        
        // Define a global pixar component finder function with expanded search
        window.findPixarComponent = function() {
          var components = [
            document.querySelector('pixar-transform-file-input'),
            document.querySelector('face-swap-file-input-wrapper'),
            document.querySelector('#pixar-component-container pixar-transform-file-input'),
            document.querySelector('#pixar-component-container face-swap-file-input-wrapper'),
            document.querySelector('[data-pixar-component]'),
            document.querySelector('.file-input-wrapper')
          ];
          
          // Return first non-null component
          for (var i = 0; i < components.length; i++) {
            if (components[i]) {
              // Store in global reference for other scripts to find
              window.pixarComponent = components[i];
              window.pixarComponentReady = true;
              
              // Expose component methods globally for ImageProcessingManager
              if (typeof components[i].handleFileSelect === 'function') {
                window.handlePixarFileSelect = components[i].handleFileSelect.bind(components[i]);
              }
              
              return components[i];
            }
          }
          return null;
        };
        
        // Force component visibility repeatedly
        function forceComponentVisibility() {
          var selectors = [
            'pixar-transform-file-input', 
            'face-swap-file-input-wrapper',
            '.file-input-wrapper', 
            '.file-input-wrapper__popup',
            '.file-input-wrapper__popup-open-btn'
          ];
          
          selectors.forEach(function(selector) {
            var elements = document.querySelectorAll(selector);
            if (elements.length) {
              debugInfo.innerHTML += '<p>Found ' + elements.length + ' elements matching: ' + selector + '</p>';
              elements.forEach(function(el) {
                el.style.display = 'block !important';
                el.style.visibility = 'visible !important';
                el.style.opacity = '1 !important';
                el.setAttribute('data-pixar-component', 'true');
              });
            }
          });
        }
        
        // Function to upload a photo using various methods
        function uploadPhoto() {
          debugInfo.innerHTML = '<p>Started photo upload process...</p>';
          
          // Try multiple methods to trigger file selection
          
          // 1. First try to find and click original upload button
          var originalButton = document.querySelector('.file-input-wrapper__popup-open-btn');
          if (originalButton) {
            debugInfo.innerHTML += '<p>Found original upload button, clicking it</p>';
            console.log('⭐ Found original button, clicking it');
            originalButton.click();
            return;
          }
          
          // 2. Find component and try to click its file input
          var pixarComponent = window.findPixarComponent();
          if (pixarComponent) {
            debugInfo.innerHTML += '<p>Found pixar component: ' + pixarComponent.tagName + '</p>';
            console.log('⭐ Found pixar component:', pixarComponent.tagName);
            
            // Find file input and click it
            var fileInput = pixarComponent.querySelector('input[type="file"]');
            if (fileInput) {
              debugInfo.innerHTML += '<p>Found file input, clicking it</p>';
              console.log('⭐ Found file input, clicking it');
              fileInput.click();
              return;
            } else {
              debugInfo.innerHTML += '<p>No file input found in component</p>';
              console.log('⭐ No file input found in component');
            }
          } else {
            debugInfo.innerHTML += '<p>No pixar component found</p>';
            console.log('⭐ No pixar component found');
          }
          
          // 3. Try to use ImageProcessingManager directly
          if (window.imageProcessingManager) {
            debugInfo.innerHTML += '<p>Trying ImageProcessingManager directly</p>';
            
            // Create and click a temporary file input
            var input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            
            input.addEventListener('change', function(e) {
              if (input.files && input.files[0]) {
                var file = input.files[0];
                debugInfo.innerHTML += '<p>File selected through direct input: ' + file.name + '</p>';
                
                // Try to use ImageProcessingManager directly
                if (typeof window.imageProcessingManager.handleFileSelect === 'function') {
                  window.imageProcessingManager.handleFileSelect({ target: { files: [file] } });
                  return;
                }
              }
            });
            
            input.click();
            return;
          }
          
          // 4. Fallback to creating our own file input
          debugInfo.innerHTML += '<p>Using fallback file input</p>';
          console.log('⭐ Using fallback file input');
          
          var input = document.createElement('input');
          input.type = 'file';
          input.accept = 'image/*';
          
          // Listen for file selection
          input.addEventListener('change', function(e) {
            if (input.files && input.files[0]) {
              var file = input.files[0];
              debugInfo.innerHTML += '<p>File selected: ' + file.name + '</p>';
              console.log('⭐ File selected:', file.name);
              
              // Try to pass the file to any available handler
              tryHandleFile(file);
            }
          });
          
          // Trigger file selection
          input.click();
        }
        
        // Function to try passing the file to various handlers
        function tryHandleFile(file) {
          // 1. Try our global handler if available
          if (typeof window.handlePixarFileSelect === 'function') {
            debugInfo.innerHTML += '<p>Using global handlePixarFileSelect function</p>';
            window.handlePixarFileSelect({ target: { files: [file] } });
            return;
          }
          
          // 2. Try component's handleFileSelect method
          var pixarComponent = window.findPixarComponent();
          if (pixarComponent && typeof pixarComponent.handleFileSelect === 'function') {
            debugInfo.innerHTML += '<p>Using component\'s handleFileSelect method</p>';
            console.log('⭐ Using component\'s handleFileSelect method');
            pixarComponent.handleFileSelect({ target: { files: [file] } });
            return;
          }
          
          // 3. Try ImageProcessingManager
          var imageManager = window.imageProcessingManager;
          if (imageManager && typeof imageManager.handleFileSelect === 'function') {
            debugInfo.innerHTML += '<p>Using ImageProcessingManager\'s handleFileSelect method</p>';
            console.log('⭐ Using ImageProcessingManager\'s handleFileSelect method');
            imageManager.handleFileSelect({ target: { files: [file] } });
            return;
          }
          
          // 4. Last resort - Convert to base64 and display
          debugInfo.innerHTML += '<p>No handlers found, using direct image display</p>';
          console.log('⭐ No handlers found, using direct image display');
          
          var reader = new FileReader();
          reader.onload = function(e) {
            var imageUrl = e.target.result;
            debugInfo.innerHTML += '<p>Image loaded as base64, length: ' + imageUrl.length + '</p>';
            
            // Find product images and replace them
            var productImages = document.querySelectorAll('.product-gallery img, .product__media img');
            if (productImages.length > 0) {
              productImages.forEach(function(img) {
                img.src = imageUrl;
              });
              debugInfo.innerHTML += '<p>Updated ' + productImages.length + ' product images</p>';
            } else {
              debugInfo.innerHTML += '<p>No product images found to update</p>';
            }
          };
          reader.readAsDataURL(file);
        }
        
        // Monitor for image-processing-manager initialization
        var imageManagerCheckInterval = setInterval(function() {
          if (window.imageProcessingManager) {
            clearInterval(imageManagerCheckInterval);
            debugInfo.innerHTML += '<p>ImageProcessingManager detected!</p>';
            
            // Override component finder in ImageProcessingManager if possible
            if (window.imageProcessingManager._findTransformComponent) {
              var originalFinder = window.imageProcessingManager._findTransformComponent;
              window.imageProcessingManager._findTransformComponent = function() {
                // Try our global component first
                if (window.pixarComponentReady && window.pixarComponent) {
                  debugInfo.innerHTML += '<p>Returning cached pixarComponent to ImageProcessingManager</p>';
                  return window.pixarComponent;
                }
                
                // Otherwise try our finding function
                var component = window.findPixarComponent();
                if (component) {
                  debugInfo.innerHTML += '<p>Found component via our finder, returning to ImageProcessingManager</p>';
                  return component;
                }
                
                // Finally try original method
                var originalResult = originalFinder.apply(window.imageProcessingManager);
                if (originalResult) {
                  window.pixarComponent = originalResult;
                  window.pixarComponentReady = true;
                }
                return originalResult;
              };
              
              debugInfo.innerHTML += '<p>Successfully overrode ImageProcessingManager._findTransformComponent</p>';
            }
          }
        }, 500);
        
        // Initialize component detection and visibility forcing
        setTimeout(function() {
          forceComponentVisibility();
          var pixarComponent = window.findPixarComponent();
          
          if (pixarComponent) {
            debugInfo.innerHTML += '<p>Pixar component found on initial check: ' + pixarComponent.tagName + '</p>';
            console.log('⭐ Pixar component found on initial check:', pixarComponent.tagName);
            
            // Force visibility
            pixarComponent.style.display = 'block !important';
            pixarComponent.style.visibility = 'visible !important';
            pixarComponent.style.opacity = '1 !important';
          } else {
            debugInfo.innerHTML += '<p>Pixar component NOT found on initial check</p>';
            console.log('⭐ Pixar component NOT found on initial check');
            
            // Start polling for component
            var checkCount = 0;
            var componentInterval = setInterval(function() {
              checkCount++;
              forceComponentVisibility();
              var foundComponent = window.findPixarComponent();
              
              if (foundComponent) {
                debugInfo.innerHTML += '<p>Pixar component found after ' + checkCount + ' attempts: ' + foundComponent.tagName + '</p>';
                console.log('⭐ Pixar component found after ' + checkCount + ' attempts:', foundComponent.tagName);
                clearInterval(componentInterval);
                
                // Force visibility
                foundComponent.style.display = 'block !important';
                foundComponent.style.visibility = 'visible !important';
                foundComponent.style.opacity = '1 !important';
              } else if (checkCount >= 20) {
                debugInfo.innerHTML += '<p>Gave up looking for pixar component after ' + checkCount + ' attempts</p>';
                console.log('⭐ Gave up looking for pixar component after ' + checkCount + ' attempts');
                clearInterval(componentInterval);
              }
            }, 500);
          }
        }, 500);
        
        // Add component detection for the Pixar integration system
        document.addEventListener('pixar-component-ready', function(event) {
          debugInfo.innerHTML += '<p>Received pixar-component-ready event!</p>';
          if (event.detail && event.detail.component) {
            window.pixarComponent = event.detail.component;
            window.pixarComponentReady = true;
            debugInfo.innerHTML += '<p>Component stored from event: ' + window.pixarComponent.tagName + '</p>';
          }
        });
        
        // Add global CSS to force visibility of all Pixar components
        var style = document.createElement('style');
        style.textContent = `
          pixar-transform-file-input, 
          face-swap-file-input-wrapper,
          .file-input-wrapper, 
          .file-input-wrapper__popup,
          .file-input-wrapper__popup-open-btn,
          #pixar-component-container * {
            display: block !important;
            visibility: visible !important;
            opacity: 1 !important;
          }
        `;
        document.head.appendChild(style);
        debugInfo.innerHTML += '<p>Added global CSS to force component visibility</p>';
      });
    </script>
  </div>
{%- endform -%}
