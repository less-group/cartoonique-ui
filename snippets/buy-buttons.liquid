{%- comment -%}
  ----------------------------------------------------------------------------------------------------------------------
  BUY BUTTONS
  ----------------------------------------------------------------------------------------------------------------------

  This component is used to show the buy buttons

  ********************************************
  Supported variables
  ********************************************

  * product: the product from which to show the buttons
  * show_payment_button: if we show or not the dynamic checkout button
  * show_gift_card_recipient: for gift card products, an optional message/email to be sent to the recipient
  * button_size: the size of the button (default to xl if none is passed)
  * atc_button_background: the background of the ATC button
  * atc_button_text_color: the text color of the ATC button
  * payment_button_background: the custom dynamic checkout button background
  * payment_button_text_color: the custom dynamic checkout button text color
  * form_id: if specified, define the form ID linked to this input
{%- endcomment -%}

{%- assign variant_picker_block = section.blocks | where: 'type', 'variant_picker' | first -%}

{%- assign recipient_feature_active = false -%}

{%- if product.gift_card? and show_gift_card_recipient -%}
  {%- assign recipient_feature_active = true -%}
  {%- assign show_payment_button = false -%}
{%- endif -%}

{%- form 'product', product, is: 'product-form', id: form_id -%}
  <input
    type="hidden"
    {% if variant_picker_block != blank %}
      disabled
    {% endif %}
    name="id"
    value="{{ product.selected_or_first_available_variant.id }}"
  >

  {%- assign button_disabled = false -%}
  {%- assign button_size = button_size | default: 'xl' -%}

  {%- if product.selected_or_first_available_variant == null -%}
    {%- capture button_content -%}{{ 'product.general.unavailable_button' | t }}{%- endcapture -%}
    {%- assign button_disabled = true -%}
  {%- elsif product.selected_or_first_available_variant.available -%}
    {%- if product.template_suffix contains 'pre-order' -%}
      {%- capture button_content -%}{{ 'product.general.pre_order_button' | t }}{%- endcapture -%}
    {%- else -%}
      {%- comment -%}Change text to reflect image upload for face swap products{%- endcomment -%}
      {%- if product.template_suffix contains 'with-faceswap' -%}
        {%- capture button_content -%}UPLOAD IMAGE & ADD TO CART{%- endcapture -%}
      {%- else -%}
        {%- capture button_content -%}{{ 'product.general.add_to_cart_button' | t }}{%- endcapture -%}
      {%- endif -%}
    {%- endif -%}
  {%- else -%}
    {%- capture button_content -%}{{ 'product.general.sold_out_button' | t }}{%- endcapture -%}
    {%- assign button_disabled = true -%}
  {%- endif -%}

  <div class="v-stack gap-4">
    {%- if recipient_feature_active -%}
      <gift-card-recipient class="gift-card-recipient v-stack gap-3">
        {%- assign checkbox_label = 'gift_card.recipient.checkbox' | t -%}
        {%- render 'checkbox', label: checkbox_label, name: 'properties[__shopify_send_gift_card_to_recipient]' -%}

        <div class="gift-card-recipient__fields" hidden>
          <div class="fieldset">
            {%- liquid
              assign recipient_email_label = 'gift_card.recipient.email_label' | t
              render 'input', type: 'email', label: recipient_email_label, name: 'properties[Recipient email]', value: form.email, required: true

              assign recipient_name_label = 'gift_card.recipient.name_label' | t
              render 'input', label: recipient_name_label, name: 'properties[Recipient name]', value: form.name

              assign send_on_label = 'gift_card.recipient.send_on_label' | t
              render 'input', type: 'date', label: send_on_label, name: 'properties[Send on]', value: form.send_on, pattern: '\d{4}-\d{2}-\d{2}'
              render 'input', type: 'hidden', name: 'properties[__shopify_offset]'

              assign message_label = 'gift_card.recipient.message_label' | t
              render 'input', label: message_label, name: 'properties[Message]', value: form.message, multiline: 3, maxlength: 200, show_max_characters_count: true
            -%}
          </div>
        </div>
      </gift-card-recipient>
    {%- endif -%}

    <buy-buttons class="buy-buttons {% if show_payment_button %}buy-buttons--multiple{% endif %}" template="{{ product.template_suffix | escape }}" form="{{ form_id }}">
      <button 
        id="atc-button"
        type="submit" 
        class="button {% if show_payment_button %}button--secondary{% endif %} {% if button_disabled %}button--disabled{% endif %} button--{{ button_size }}"
        {% if button_disabled %}disabled{% endif %}
        {% if atc_button_background != blank and atc_button_background != 'rgba(0,0,0,0)' %}
          style="--button-background: {{ atc_button_background.rgb }}; --button-text-color: {{ atc_button_text_color.rgb }};"
        {% endif %}
      >
        {{ button_content }}
      </button>

      {%- if show_payment_button -%}
        {{- form | payment_button -}}

        <style>
          #{{ form_id }} .shopify-payment-button {
            {%- unless product.selected_or_first_available_variant.available -%}
              display: none;
            {%- endunless -%}

            {%- if payment_button_background != blank and payment_button_background != 'rgba(0,0,0,0)' -%}
              --button-background: {{ payment_button_background.rgb }};
            {%- endif -%}

            {%- if payment_button_text_color != blank and payment_button_text_color != 'rgba(0,0,0,0)' -%}
              --button-text-color: {{ payment_button_text_color.rgb }};
            {%- endif -%}
          }
        </style>
      {%- endif -%}
    </buy-buttons>

    <!-- Hidden area for pixar components and debug info -->
    <div id="pixar-component-area" style="height: 0; overflow: hidden; position: absolute; visibility: hidden;">
      {% if settings.enable_pixar_transform %}
        {% render 'pixar-transform-file-input', product: product, section_id: section.id, customer: customer %}
      {% else %}
        {% render 'face-swap-file-input', product: product, section_id: section.id, customer: customer %}
      {% endif %}
      
      <div id="pixar-component-debug" style="display: none;">
        <div id="debug-info-content"></div>
      </div>
    </div>

    <script>
      // Initialize processing state variable
      window.imageUploaded = false;
      
      document.addEventListener('DOMContentLoaded', function() {
        console.log('ðŸ”„ Buy button handler initialized');
        
        // Set up debugging
        var debugInfo = document.getElementById('debug-info-content');
        if (debugInfo) debugInfo.innerHTML = '<p>Buy button handler initialized</p>';
        
        // Register image processing handlers
        function initializeImageProcessing() {
          // Create global references
          window.pixarComponentReady = false;
          window.pixarComponent = findComponent();
          
          // Define component finder function
          function findComponent() {
            var components = [
              document.querySelector('pixar-transform-file-input'),
              document.querySelector('face-swap-file-input-wrapper'),
              document.querySelector('.file-input-wrapper')
            ];
            
            for (var i = 0; i < components.length; i++) {
              if (components[i]) {
                if (debugInfo) debugInfo.innerHTML += '<p>Found component: ' + components[i].tagName + '</p>';
                return components[i];
              }
            }
            return null;
          }
          
          // Try to find input element
          function findFileInput() {
            // Try component first
            var component = window.pixarComponent || findComponent();
            if (component) {
              var fileInput = component.querySelector('input[type="file"]');
              if (fileInput) return fileInput;
              
              if (debugInfo) debugInfo.innerHTML += '<p>Component found but no file input inside</p>';
            }
            
            // Try known selectors
            var inputs = [
              document.querySelector('.file-input-wrapper__file-input'),
              document.querySelector('input[type="file"]')
            ];
            
            for (var i = 0; i < inputs.length; i++) {
              if (inputs[i]) {
                if (debugInfo) debugInfo.innerHTML += '<p>Found file input directly</p>';
                return inputs[i];
              }
            }
            
            return null;
          }
          
          // Create a fallback input if needed
          function createFallbackInput() {
            var input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.id = 'fallback-file-input';
            input.style.display = 'none';
            document.body.appendChild(input);
            
            // Set up change listener
            input.addEventListener('change', function(e) {
              if (input.files && input.files[0]) {
                handleSelectedFile(input.files[0]);
              }
            });
            
            if (debugInfo) debugInfo.innerHTML += '<p>Created fallback file input</p>';
            return input;
          }
          
          // Trigger file selection
          window.triggerImageUpload = function() {
            if (debugInfo) debugInfo.innerHTML = '<p>Image upload triggered</p>';
            console.log('ðŸ”„ Image upload triggered');
            
            // Try to find existing file input
            var fileInput = findFileInput();
            
            // Create fallback if needed
            if (!fileInput) {
              if (debugInfo) debugInfo.innerHTML += '<p>No file input found, creating fallback</p>';
              fileInput = createFallbackInput();
            }
            
            // Trigger click
            if (fileInput) {
              if (debugInfo) debugInfo.innerHTML += '<p>Clicking file input</p>';
              fileInput.click();
            } else {
              if (debugInfo) debugInfo.innerHTML += '<p>ERROR: Could not find or create a file input</p>';
              console.error('Could not find or create a file input');
            }
          };
          
          // Handle the selected file
          function handleSelectedFile(file) {
            if (debugInfo) debugInfo.innerHTML += '<p>File selected: ' + file.name + '</p>';
            console.log('ðŸ”„ File selected:', file.name);
            
            // Try built-in handlers first
            var handled = false;
            
            // 1. Try component's handleFileSelect
            var component = window.pixarComponent || findComponent();
            if (component && typeof component.handleFileSelect === 'function') {
              if (debugInfo) debugInfo.innerHTML += '<p>Using component\'s handleFileSelect</p>';
              component.handleFileSelect({ target: { files: [file] } });
              handled = true;
            }
            
            // 2. Try image processing manager
            if (!handled && window.imageProcessingManager && typeof window.imageProcessingManager.handleFileSelect === 'function') {
              if (debugInfo) debugInfo.innerHTML += '<p>Using ImageProcessingManager</p>';
              window.imageProcessingManager.handleFileSelect({ target: { files: [file] } });
              handled = true;
            }
            
            // 3. Fallback to basic image display
            if (!handled) {
              if (debugInfo) debugInfo.innerHTML += '<p>Using fallback image display</p>';
              displayImageDirectly(file);
            }
            
            // Mark as uploaded so form can submit
            window.imageUploaded = true;
            
            // Update button text
            var button = document.getElementById('atc-button');
            if (button) {
              button.textContent = 'IMAGE UPLOADED - ADD TO CART';
            }
          }
          
          // Simple image display fallback
          function displayImageDirectly(file) {
            var reader = new FileReader();
            reader.onload = function(e) {
              var imageUrl = e.target.result;
              
              // Find product images and replace them
              var productImages = document.querySelectorAll('.product-gallery img, .product__media img');
              if (productImages.length > 0) {
                if (debugInfo) debugInfo.innerHTML += '<p>Updating ' + productImages.length + ' product images</p>';
                productImages.forEach(function(img) {
                  img.src = imageUrl;
                });
              } else {
                if (debugInfo) debugInfo.innerHTML += '<p>No product images found to update</p>';
              }
            };
            reader.readAsDataURL(file);
          }
        }
        
        // Initialize image processing functionality
        initializeImageProcessing();
        
        // Set up form submission interception for with-faceswap products
        var productForm = document.querySelector('form[is="product-form"]');
        if (productForm) {
          var templateSuffix = '{{ product.template_suffix }}';
          
          if (templateSuffix.includes('with-faceswap')) {
            productForm.addEventListener('submit', function(e) {
              // If this is a faceswap product and no image uploaded yet
              if (!window.imageUploaded) {
                e.preventDefault();
                e.stopPropagation();
                
                // Trigger image upload
                if (typeof window.triggerImageUpload === 'function') {
                  window.triggerImageUpload();
                }
                
                return false;
              }
              
              // Otherwise continue with form submission
              return true;
            });
            
            // Also intercept ATC button clicks directly
            var atcButton = document.getElementById('atc-button');
            if (atcButton) {
              atcButton.addEventListener('click', function(e) {
                if (!window.imageUploaded) {
                  e.preventDefault();
                  e.stopPropagation();
                  
                  // Trigger image upload
                  if (typeof window.triggerImageUpload === 'function') {
                    window.triggerImageUpload();
                  }
                  
                  return false;
                }
              });
            }
            
            console.log('ðŸ”„ Form submission interception set up for faceswap product');
          }
        }
      });
    </script>
  </div>
{%- endform -%}
