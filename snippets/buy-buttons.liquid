{%- comment -%}
  ----------------------------------------------------------------------------------------------------------------------
  BUY BUTTONS
  ----------------------------------------------------------------------------------------------------------------------

  This component is used to show the buy buttons

  ********************************************
  Supported variables
  ********************************************

  * product: the product from which to show the buttons
  * show_payment_button: if we show or not the dynamic checkout button
  * show_gift_card_recipient: for gift card products, an optional message/email to be sent to the recipient
  * button_size: the size of the button (default to xl if none is passed)
  * atc_button_background: the background of the ATC button
  * atc_button_text_color: the text color of the ATC button
  * payment_button_background: the custom dynamic checkout button background
  * payment_button_text_color: the custom dynamic checkout button text color
  * form_id: if specified, define the form ID linked to this input
{%- endcomment -%}

{%- assign variant_picker_block = section.blocks | where: 'type', 'variant_picker' | first -%}

{%- assign recipient_feature_active = false -%}

{%- if product.gift_card? and show_gift_card_recipient -%}
  {%- assign recipient_feature_active = true -%}
  {%- assign show_payment_button = false -%}
{%- endif -%}

{%- form 'product', product, is: 'product-form', id: form_id -%}
  <input
    type="hidden"
    {% if variant_picker_block != blank %}
      disabled
    {% endif %}
    name="id"
    value="{{ product.selected_or_first_available_variant.id }}"
  >

  {%- assign button_disabled = false -%}
  {%- assign button_size = button_size | default: 'xl' -%}
  {%- assign is_transform_product = false -%}

  {%- if product.template_suffix contains 'with-faceswap' or product.template_suffix contains 'pixar-transform' or product.template_suffix contains 'cartoonique' -%}
    {%- assign is_transform_product = true -%}
  {%- endif -%}

  {%- if product.selected_or_first_available_variant == null -%}
    {%- capture button_content -%}{{ 'product.general.unavailable_button' | t }}{%- endcapture -%}
    {%- assign button_disabled = true -%}
  {%- elsif product.selected_or_first_available_variant.available -%}
    {%- if product.template_suffix contains 'pre-order' -%}
      {%- capture button_content -%}{{ 'product.general.pre_order_button' | t }}{%- endcapture -%}
    {%- else -%}
      {%- comment -%}Change text to reflect image upload for face swap products{%- endcomment -%}
      {%- if product.template_suffix contains 'with-faceswap' or product.template_suffix contains 'cartoonique' -%}
        {%- capture button_content -%}UPLOAD IMAGE & ADD TO CART{%- endcapture -%}
      {%- else -%}
      {%- capture button_content -%}{{ 'product.general.add_to_cart_button' | t }}{%- endcapture -%}
      {%- endif -%}
    {%- endif -%}
  {%- else -%}
    {%- capture button_content -%}{{ 'product.general.sold_out_button' | t }}{%- endcapture -%}
    {%- assign button_disabled = true -%}
  {%- endif -%}

  <div class="v-stack gap-4">
    {%- if recipient_feature_active -%}
      <gift-card-recipient class="gift-card-recipient v-stack gap-3">
        {%- assign checkbox_label = 'gift_card.recipient.checkbox' | t -%}
        {%- render 'checkbox', label: checkbox_label, name: 'properties[__shopify_send_gift_card_to_recipient]' -%}

        <div class="gift-card-recipient__fields" hidden>
          <div class="fieldset">
            {%- liquid
              assign recipient_email_label = 'gift_card.recipient.email_label' | t
              render 'input', type: 'email', label: recipient_email_label, name: 'properties[Recipient email]', value: form.email, required: true

              assign recipient_name_label = 'gift_card.recipient.name_label' | t
              render 'input', label: recipient_name_label, name: 'properties[Recipient name]', value: form.name

              assign send_on_label = 'gift_card.recipient.send_on_label' | t
              render 'input', type: 'date', label: send_on_label, name: 'properties[Send on]', value: form.send_on, pattern: '\d{4}-\d{2}-\d{2}'
              render 'input', type: 'hidden', name: 'properties[__shopify_offset]'

              assign message_label = 'gift_card.recipient.message_label' | t
              render 'input', label: message_label, name: 'properties[Message]', value: form.message, multiline: 3, maxlength: 200, show_max_characters_count: true
            -%}
          </div>
        </div>
      </gift-card-recipient>
    {%- endif -%}

    <buy-buttons class="buy-buttons {% if show_payment_button %}buy-buttons--multiple{% endif %}" template="{{ product.template_suffix | escape }}" form="{{ form_id }}">
      <button 
        id="atc-button"
        type="submit" 
        class="button {% if show_payment_button %}button--secondary{% endif %} {% if button_disabled %}button--disabled{% endif %} button--{{ button_size }}"
        {% if button_disabled %}disabled{% endif %}
        {% if atc_button_background != blank and atc_button_background != 'rgba(0,0,0,0)' %}
          style="--button-background: {{ atc_button_background.rgb }}; --button-text-color: {{ atc_button_text_color.rgb }};"
        {% endif %}
        {% if product.template_suffix contains 'with-faceswap' or product.template_suffix contains 'pixar-transform' or product.template_suffix contains 'cartoonique' %}data-transform-required="true"{% endif %}
      >
        {{ button_content }}
      </button>

      {%- if show_payment_button -%}
        {{- form | payment_button -}}

        <style>
          #{{ form_id }} .shopify-payment-button {
            {%- unless product.selected_or_first_available_variant.available -%}
              display: none;
            {%- endunless -%}

            {%- if product.template_suffix contains 'with-faceswap' or product.template_suffix contains 'pixar-transform' or product.template_suffix contains 'cartoonique' -%}
              display: none;
            {%- endif -%}

            {%- if payment_button_background != blank and payment_button_background != 'rgba(0,0,0,0)' -%}
              --button-background: {{ payment_button_background.rgb }};
            {%- endif -%}

            {%- if payment_button_text_color != blank and payment_button_text_color != 'rgba(0,0,0,0)' -%}
              --button-text-color: {{ payment_button_text_color.rgb }};
            {%- endif -%}
          }
        </style>
      {%- endif -%}
    </buy-buttons>

    <!-- Hidden area for components that aren't directly shown -->
    <div id="pixar-component-area" style="height: 0; overflow: hidden; position: absolute; visibility: hidden;">
      {% if product.template_suffix contains 'with-faceswap' or product.template_suffix contains 'pixar-transform' %}
      {% if settings.enable_pixar_transform %}
        {% render 'pixar-transform-file-input', product: product, section_id: section.id, customer: customer %}
      {% else %}
        {% render 'face-swap-file-input', product: product, section_id: section.id, customer: customer %}
        {% endif %}
      {% endif %}
      
      <div id="pixar-component-debug" style="display: none;">
        <div id="debug-info-content"></div>
      </div>
    </div>

    <script>
      // Initialize processing state variable
      window.imageUploaded = false;
      
      document.addEventListener('DOMContentLoaded', function() {
        console.log('ðŸ”„ Buy button handler initialized');
        
        // Set up debugging
        var debugInfo = document.getElementById('debug-info-content');
        if (debugInfo) debugInfo.innerHTML = '<p>Buy button handler initialized</p>';
        
        // Check if this is a faceswap product and add a dedicated upload button if needed
        var templateSuffix = '{{ product.template_suffix }}'.trim();
        
        // Add cartoonique detection but preserve existing code
        if (templateSuffix.includes('cartoonique')) {
          console.log('ðŸ”„ This is a Cartoonique product, using dedicated Aurora integration');
          
          // Listen for transform completion event from Aurora integration
          document.addEventListener('pixar-transform-complete', function(event) {
            console.log('ðŸ”„ Cartoonique transform complete event received');
            window.imageUploaded = true;
          });
          
          return; // Let Aurora integration handle the rest
        }
        
        if (templateSuffix.includes('with-faceswap')) {
          console.log('ðŸ”„ This is a faceswap product, using dedicated pixar integration');
          
          // We're no longer adding a button here since we have a dedicated implementation
          // in the Aurora pixar integration code below
        }
        
        // For other transform products, continue with standard handling
        if (templateSuffix.includes('with-faceswap') || templateSuffix.includes('pixar-transform')) {
          console.log('ðŸ”„ This is a transform product, ensure proper integration');
          
          // Handle button state based on transform completion
          function updateButtonState() {
            var addToCartButton = document.getElementById('atc-button');
            if (!addToCartButton) return;
            
            if (window.pixarTransformComplete || window.imageUploaded) {
              addToCartButton.disabled = false;
              addToCartButton.classList.remove('button--disabled');
              // Update text to standard Add to Cart
              addToCartButton.textContent = "{{ 'product.general.add_to_cart_button' | t }}";
            } else {
              addToCartButton.disabled = true;
              addToCartButton.classList.add('button--disabled');
              // Set text to remind about upload
              addToCartButton.textContent = "UPLOAD YOUR PHOTO FIRST";
            }
          }
          
          // Listen for completion events
          document.addEventListener('pixar-transform-complete', function(event) {
            console.log('ðŸ”„ Transform complete event received');
            window.pixarTransformComplete = true;
            window.imageUploaded = true;
            updateButtonState();
          });
        }
        
        // Register image processing handlers
        function initializeImageProcessing() {
          // Create global references
          window.pixarComponentReady = false;
          window.pixarComponent = findComponent();
          
          // Define component finder function
          function findComponent() {
            var components = [
              document.querySelector('pixar-transform-file-input'),
              document.querySelector('face-swap-file-input-wrapper'),
              document.querySelector('.file-input-wrapper')
            ];
            
            for (var i = 0; i < components.length; i++) {
              if (components[i]) {
                if (debugInfo) debugInfo.innerHTML += '<p>Found component: ' + components[i].tagName + '</p>';
                return components[i];
              }
            }
            return null;
          }
          
          // Try to find input element
          function findFileInput() {
            // Try component first
            var component = window.pixarComponent || findComponent();
            if (component) {
              var fileInput = component.querySelector('input[type="file"]');
              if (fileInput) return fileInput;
              
              if (debugInfo) debugInfo.innerHTML += '<p>Component found but no file input inside</p>';
            }
            
            // Try known selectors
            var inputs = [
              document.querySelector('.file-input-wrapper__file-input'),
              document.querySelector('input[type="file"]')
            ];
            
            for (var i = 0; i < inputs.length; i++) {
              if (inputs[i]) {
                if (debugInfo) debugInfo.innerHTML += '<p>Found file input directly</p>';
                return inputs[i];
              }
            }
            
            return null;
          }
          
          // Trigger file selection
          window.triggerImageUpload = function() {
            if (debugInfo) debugInfo.innerHTML = '<p>Image upload triggered</p>';
            console.log('ðŸ”„ Image upload triggered');
            
            // Try to find existing file input
            var fileInput = findFileInput();
            
            // Try alternate methods if file input not found
            if (!fileInput) {
              var component = findComponent();
              
              // Try component's openPopup method
              if (component && typeof component.openPopup === 'function') {
                if (debugInfo) debugInfo.innerHTML += '<p>Using component openPopup method</p>';
                component.openPopup();
                return;
              }
              
              // Try to find popup and show it
              var popup = document.querySelector('.file-input-wrapper__popup');
              if (popup) {
                if (debugInfo) debugInfo.innerHTML += '<p>Found popup, showing it directly</p>';
                popup.style.display = 'flex';
                popup.style.visibility = 'visible';
                popup.style.opacity = '1';
                return;
              }
              
              // If we get here, we couldn't find any way to trigger the upload
              if (debugInfo) debugInfo.innerHTML += '<p>ERROR: Could not find a way to trigger file upload</p>';
              console.error('Could not find a way to trigger file upload');
            } else {
              // Simple case - just click the file input
              if (debugInfo) debugInfo.innerHTML += '<p>Clicking file input</p>';
              fileInput.click();
            }
          };
          
          // For traditional transform products, handle form submission
          if (templateSuffix.includes('with-faceswap') || templateSuffix.includes('pixar-transform')) {
            var form = document.querySelector('form[action="/cart/add"]');
            if (form) {
              form.addEventListener('submit', function(event) {
                // If transformation is not complete, prevent submission
                if (!window.pixarTransformComplete && !window.imageUploaded) {
                  event.preventDefault();
                  event.stopPropagation();
                  
                  // Trigger the upload
                    window.triggerImageUpload();
                  return false;
                }
              });
            }
            
            // Make the add to cart button trigger the upload flow if not transformed
            var addToCartButton = document.getElementById('atc-button');
            if (addToCartButton) {
              addToCartButton.addEventListener('click', function(event) {
                if (!window.pixarTransformComplete && !window.imageUploaded) {
                  event.preventDefault();
                  event.stopPropagation();
                  
                  // Trigger the upload
                  window.triggerImageUpload();
                  return false;
                }
              });
            }
          }
        }
        
        // Initialize everything
        initializeImageProcessing();
          });
        </script>
  </div>
{%- endform -%}
